/*
 * Copyright (c) 2016, Shinya Yagyu
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

const TX_STRING: &str

const HASH_LENGTH: usize = 243;
const STATE_LENGTH: usize = 3 * HASH_LENGTH;
const TRYTE_LENGTH: usize = HASH_LENGTH / 3; 

const TX_LENGTH: usize = 2673;
const TRITS_LENGTH: usize = 3 * TX_LENGTH;

fn main() {
    let trits = tx2trit(TX_STRING);
    let state = absorb(trits, TRITS_LENGTH);
    let _tryte = hash2tryte(state);
}

const CHAR_9_U8: u8 = '9' as u8;
const CHAR_A_U8: u8 = 'A' as u8;
const CHAR_Z_U8: u8 = 'Z' as u8;

const TRYTE2TRIT_TABLE: [[i8; 3]; 27] = [
    [0, 0, 0], [1, 0, 0], [-1, 1, 0], [0, 1, 0], [1, 1, 0], [-1, -1, 1], [0, -1, 1], [1, -1, 1], [-1, 0, 1], [0, 0, 1], [1, 0, 1], [-1, 1, 1], [0, 1, 1], [1, 1, 1], [-1, -1, -1], [0, -1, -1], [1, -1, -1], [-1, 0, -1], [0, 0, -1], [1, 0, -1], [-1, 1, -1], [0, 1, -1], [1, 1, -1], [-1, -1, 0], [0, -1, 0], [1, -1, 0], [-1, 0, 0]
];

const INDICES: [usize; 730] = [

];

const TRUTH_TABLE: [i8; 11] = [ 1, 0, -1, 0, 1, -1, 0, 0, -1, 1, 0 ];

fn tx2trit(tx: &str) -> [i8; TRITS_LENGTH] {
    println!("tx2trit");

    let tx_bytes = tx.as_bytes();
    if tx_bytes.len() != TX_LENGTH {
        panic!("tx len must be {} but {}", TX_LENGTH, tx_bytes.len());
    }

    let mut trits: [i8; TRITS_LENGTH] = [0; TRITS_LENGTH];
    for count in 0..TX_LENGTH {
        if !(tx_bytes[count] == CHAR_9_U8 || (tx_bytes[count] >= CHAR_A_U8 && tx_bytes[count] <= CHAR_Z_U8)) {
            panic!("illegal tx char {}", tx_bytes[count]);
        }

        // tx_bytes 9 -> 0, A -> 1, ... Z -> 34
        let mut ch: usize = 0;
        if tx_bytes[count] != CHAR_9_U8 {
            ch = (tx_bytes[count] - CHAR_A_U8 + 1) as usize;
        }

        trits[count * 3] = TRYTE2TRIT_TABLE[ch][0];
        trits[count * 3 + 1] = TRYTE2TRIT_TABLE[ch][1];
        trits[count * 3 + 2] = TRYTE2TRIT_TABLE[ch][2];
    }

    trits
}

fn transform(state: [i8; STATE_LENGTH]) -> [i8; STATE_LENGTH] {
    let mut transformed_state: [i8; STATE_LENGTH] = state;
    let mut round = 0;
    loop {
        if 27 <= round { break; }

        let copy_state = transformed_state;
        for i in 0..STATE_LENGTH {
            let aa = INDICES[i];
            let bb = INDICES[i + 1];
            let cc = (copy_state[aa] + (copy_state[bb] << 2) + 5) as usize;
            transformed_state[i] = TRUTH_TABLE[cc];
        }
        round += 1;
    }

    transformed_state
}

fn absorb(trits: [i8; TRITS_LENGTH], size: usize) -> [i8; STATE_LENGTH] {

    let mut state: [i8; STATE_LENGTH] = [0; STATE_LENGTH];
    let mut offset = 0;
    loop {
        if offset >= size { break; }
        
        let mut len = HASH_LENGTH;
        if size < HASH_LENGTH {
            len = size;
        }
        
        for count in 0..len {
            state[count] = trits[count + offset]
        }

        let transformed_state = transform(state);
        state = transformed_state;

        offset = offset + len;
    }

    state
}


fn hash2tryte(hash: [i8; STATE_LENGTH]) -> [u8; TRYTE_LENGTH]{
    let mut tryte: [u8; TRYTE_LENGTH] = [0; TRYTE_LENGTH];
    for count in 0..TRYTE_LENGTH {
        let mut n = hash[count * 3] + hash[count * 3 + 1] * 3 + hash[count * 3 + 2] * 9;
        if n < 0 {
            n = n + 27;
        }

        if n > 27 || n < 0 {
            panic!("illegal hash. {}", n);
        }

        if n == 0 {
            tryte[count] = CHAR_9_U8;
        } else {
            tryte[count] = n as u8 + CHAR_A_U8 - 1;
        }
    }

    tryte
}

#[cfg(test)]
mod tests {
    use super::*;

    const SYMBOLS_TRITS_EXPECTED: &str = "MPMZZPPZMMMPMZZPZPZPMZPMMPPPZMMPMPZMZMZZZZMPPPPMMZMPMPZMZPZMPMZPMZZPPMMMPPZZZPMPZPZPPPZPPMZZMMZZPZMZMMZMPMMPMZPMMZPZPPZMPPZMZZZPPMMMZPMZPMMMMMPZPPZZPPMZPZPMZMMPPZMMPPMPZMPMZZMZMMPMMPPZMMMMPZMZZPMPPPPPPMZMMPMZMMZZMMMPZPMMMZMZMZPZPZMPMPPMPMMZZZMMPPPZZZPPMZMPPZPPZMZZZPZMZMMMMZZZZPPMPZZZPMMPPPMMPPMPZZMPPPZZPZMMZMPZZZPPPZMMZPPZZZZPPZPMPPPMZMMPZPPPMZPZMMMZPMMMMMMZPPZPPZMZZZMPZPZZZPZMMZZPZPZMZZMZZZMPZZZMPPZZPPZZPMZPPZZPZPZMMPPPZPMMZMMPZZZZZZZPMPMMPMMZPPZPMMZMPMMZPMPZMMMZMPMPPZMPPMPMPZMPZMMPMPZPPZZMZMMMMPMZPZZMPMZPMMPMZMZMZZPMMPZZZZZZPZZPZPZPZZMZZMMMMZZPZZMMMZZMZMPMPZZZZMZZZMMPZPZPPMPMZZMZZPZZZZPZZZMMMZPZMZMZPPMZPPMZMMPZMZZZZPPMMZPPZZPMZMMMZPZZZPZMPPZZPMPZZMZMMPZMMPPMZMPMPPPPZPZZPPPPZPMMZPPZPMPMPMPZPMPZMMZMMPMZMPPMMZZMZPPZPPZMZZZPPPZMPPZMMPPMMZZPPPZMMMMMPZPMZPZMZPMMZPZPPZZZZZMPPMZZPPMMZZZZPMMMMMZZZZPPZPPPMMMZMMPZPZPZZMPZMMMPMPPPPMMPPMPPPZPMPZZZZPZPZZMMPMMZZZPZZMZPZMPPZMPZPPPPZPPMZPZZMPPPPZZMZZZZZZZMMPPMPMMMZPPZMPMZZPMMMPPZZPPZZPPZPZPMZMMMPZZPPPPZPZMPPZZMZMPMZMMPPZZPMZPPMPZPZPZPPZZMZPPMMZPPZZZPZPZMPPZPZMPZZZPMMMZPZZMMPPPMMZPZMZPMPZPMMMMMZZZZPPPMZMZMPZMZPZZZZMPMZMZZMMZMZPZZZZPZZZMMZMPZPPZZZPMPZMMMPMPZMPPMMZPPMZMPZMZZZMPZMZPMPMMMPPPMZZMZMMPPPZPZPZZZMZZMZPZZZMZPMMPPMMPZPZZPMMZZZZPMZZMPZPZMZZZPPPMMZZZMZZZPMMZMMZZPZPPPPPMPPZZMZPMPPZZZMPMZZZMMZZPZZMMPMPZPZZPPPPMMMZZPMZZMMPPMMPMPZMPPPPMMZZMZMMZZMMMMZZZMPPZZPMPPPMZPZMPZZMMPPZPPZZZZPPPPMZZZPPMPZPMZMZZPZZMMZZPMMPPMPZPPZMPZMMPPMZPZMZMZPMZPPPMMZZZPPZZMMZZPMZMZPPMPMMZMZMPZZPPMZPPZZZMPZPPPMMZMPPMPPZMPPMPMZZMZMMMPPMZPZPMMMZPZPMPZZMZMMPMZPMZPPZZZPPPZZPMZPPMZMPPMPZMZMZPMPPPMZPPMPMMPMMZZZZMZPPPMMPZMMPPPMMPPMZZPZPMZZMPZPZZZZPZPZPMPZMPMMMMPZZPMZZPZPMMMZPMZMMPMMMZMPMMPMMPPMZPZMZPMMPZZMPZMPMPMZPMZZPZZPZPPMPZZMZZPZZMPMMMPPPMMMPPPZZZZPMMMPZPZPMZMMPMMMMZMMMZMMMPMZMMZMMPZMPMPZMPZZMPMMZZPZPMPMPPMZPMMPMMZZPMMZPMMMZPPZPMZMPPZZMZMMMPZZZMZMMZPMPPMPZMPMMPPPPPZZPPZPMPPPMMPMZZMMZPPPPMMMMPPZMMMPPPPMZMPMMPZMPPMMPMPPZMZZMPPPZZMPMZPMMPMZMMPZZMMPPPMMMZZPZMMZZZZMZPZZPMPPMPPMZPPPPZMMMZMPMZPZPZMMZPMPMZZPPMPMZMPPMMMMPZZMPZMMPPMPZPPMMMZPZZZZMMZPPMPPZPMMMMPPZPMMMZPMPZMPMZZPMZZMPZZZMMZPZMMPMMMPMZPMMPMZMMMZZPZPZZZZZPPZMPMZMMMPMZMMMPMMMMPPZZMPPMPPZZMMPPZZMPZMPPMPPMPZMPPMMPZMPZPPPPZMMPZPPMMPZMMPMZPMMMZZMPMZPZPPMMPPZMMMPZZZPMMZPZZZZZMZPMMZMPMZPZMZMMPMZZZZZPPMPPMZPPMZMPPZZZMPPZZZMMZPPZMMPZPPPPZZMPPZMZZMPPZPZMPZPMZZMMZPZPMMPMPMMPPMPPMPMZZZPPZZZZPZPMPZMPZPMZZMPPPZZZZMPPZPMPZZPPPMPZPPMZZPZPZZPZPPMMMPZMZMPZMMMPZZMZZPPMZMZMMMZZMMZPPMZPPPZZMZZZPMZMPZPPPMPMZMMMMZPZPZZPPMPZPMPMMPZPMPPPMZPPMZZMMPMPMMMPMPMMMZPMPZMZZPPPMMPZMPMMMMZPPPPPPPZZMMPPMPZMMZZMPZMPPZPMPPMMZPMPZMZMPZZMMZMZZZPZZPPMMMZMMZMZZZPZZMPMMMMPPPZMPZZMZPZZPMPPPZPZMMPPPMMPMMZZPZZPZZMPPMPPPMPMZPZMPPZPMZMMMZZPZMZPMZPMZMPMMPPPZPMPMZMMMPPMZZZPMPMPZPPMPPMMMMMPZMZMZPMMZMZMZZZMZPPPMZMPPPMPZPZPMPMPPZPPZPMMPPPZMZMPZZZPZMPMMMZPMMPZMZMPZMMZMMMMMMPMMMMZPZPZPZZMPPZMZMMPZPZMZPZPMPZMZPPMMPPMMZMZZZZPPMPPPZMPPZZZZZMPMPMZPMPPPZZMZPPZMMPMZMMPZPPPZPZPMMPMZPZZPPZZZMMZMPZZZPPPZMPZPPPZZMZZPZPZMZZPPZPMPMPMZMZPMPZZZPMPMPMPPMZMPMPMZMZZPZMZZMZMMMZPPPZZPMMZZMMZMMMMMPMMMMPPMPPZPMPZMZPPMMZZMPZPZMMMPZMPZMZPPMZZMZZMZZZMZZMZMZZPMZZMMPMMZPMMZMZMZZZMPPPPZMZZPPPZPZMPMPMZMPMPPMMPPMMPMMPZZZMPPZPMPMPPPMPZZPPMPZMMZPMZPZZMMZPZPMMPZZPMZPZPMMMMPZZMPMZPPZZZMMPMZPZZPPZPMZMMPMZPZZPZPPPMZMZMPMZPZZPZPPPMPMZPPMPMMPPPMZMZMPPMZPPPZZPZMMMPPPPZZMZPPPZPMMZPMPMPMPZMZMPMZPMZMPZZMPZZZZPZZZMZZPMPPPPZPPMMZZMZZZZZMPPZZPZMPMMPZPPZPMZPMMPPPMMZMZPMMZZMZZPZMPPPMMPMMZZPMMZMZZZMMPZMPPPZPMPZZZMZPPMMPPMPZPMPZPMPPZMZMZZPMMPMZPMPZMZZZMMPPZMMPZZMZPZZMZMMZMPZMZMMPMMMPZZZPMPZZPMZZMMPZMMZMMPZPZPPMPPPPPPPMZPZZPPPZZPMMMMPZMPMZPMZPMPMZMPZMPPZPZPPPZMPPPPPPMMMMMMPZPMMMPMZPMMMZPPPZZPPMZMZZZPZMMZPZZMPZPMZZPPPPZPPPMPMZMZPZZPMPMMZZMPPMZMMPZMZZZMPMPZPPZMMPMZPPMPMMMMMPZMZMMPPMPMZZZPMPMMMPPMMZPZZMZPPPMPMPPPPMMPPMZPPMPZMZMPMMMPZMMMMZMZPMMPZZZPMPMMMPPPPZZZZZZMPPPPMZZMMPMPMMMMMPZZPZZMMZPMMZZMZZZZZMMZMPMZMPZZPPZMPMZZPPZPPMMMZPMZPPZPZPZMZMZMZZMPMPMPMPPMPZZZMPPPMMMPZZZZZZMPPMMPZZZPMZPZMZPZMMPMPMMPZZZPMMPZPPZZPMMZPMMMPPMZZPMZZMPPZZZZMPZMPMMPPMZPPMPMPPZMPPMMPPZZMPPZPPZPZMPPZPMZPPMZZMZPZPPMPPZMMMZMMZZPPPPPMZPPZMPZPPZMPZZZMZMMZPMPMZZZZPPZPPPZMZZZMZMMZMZMMPPZPZMZMPPMZZPMZZPPMMMPPPZMMPZPPMPZMMPPPZZPZPPPPPPMMMZZZZMZMZPMZZPZPPMZMPZMMPPMZPMZZPPPPZZZMZPMPPPMMZPZPMPZPMPZPPPMPMPZZMPMPMMZZPPPZMZPPZPPPMZPMMPZMZZMMZZPMZMMPMZMMMZMMZMMPPPMMPPZPPPMZMMZPMZMZMZPPZZZPZZPMMZPPPZPPMMPPMZZZZZMZZPPZMPMPZMZZPMZPMZMZMMMPMZMMPPMZPMPPPMMPZZPPZMPPPPZZZZZPPMMZZZZPZMPMZMMPMPMMMPZZMZZMZPPZMZPPPZZPPPPMZPPMPPMZZMZZMZPZPPPMZZPPPMMZZPMMPZZZPZMMPPZMMMMPPZPZMZPZZZMPPPZMPPZZPZPZZMMPMZZZPZMMPPMPPMPZZMMPZMZZPZZZZPPMMZZPZMZMPPZMPPZMPMPZMMZPPPMMMPZMMPZMMZPZZPMPMZZZPZPMZPPPPMPZMPZPMMMZMMPMZZMPMPZMMZZMMMPZZPPMZMZMPZMMPZZPZPPPMZPPZPMZMZZPZMZMPMMPMMZMMMZZMMZPZMPPPPPZPZPZMPMPMPZZZMMPMPZPZZMZZMPMZMMZPMMZMZPZZPMPMMPZPPZZPZMPPMMPMPZZZPMZZMZZZZZMPMMMMMMPMZPMPPZMPZPZMZPZPPMZMPMMZPZZPPPPMMZPZMZMZMZZMZPZZZPZPMZMZZPPMZZMZMPPZMPZMZMMPZMMMZPZMMMMPZZZPMZMMMMZPPZPZZPPPZPZZPZPZPMPMPPMMMMPMMMMZZMZPZMMZZPZMPMMPMZPMPZPZMZPZMZMZZPMPMPPMZMPMZPZPMZMMMMPPZMPPMZMZZMMPZPPMMZPZMMMMPMZPMMZZZZMZZZZPPPPMMZMZPZZMZPMZZPMMMZZZZPPZZZPMPMMMPZMZPMMPMPZZZMPPMMZPMZPPPMPZMZZMZMMZMZPZMMPPZMMMMZMPPPMZPMZMMMPZMZMPMPZPZZZMZZMMPPZMPMZPZMMMMPMPPMPMMZPPPZMZPZPMMMMZZMZMZPZZPPZZMZZPMPPPZPZMMZZMPPZPPPPMZZMPMPPPMZPMMMZZZPPMMMZZPPMZZPZZMPMMPZZZZZMPZMPZZZMZPMPZPMPZPPZMPZZPMPMMMMMMMPPMZMPZPZMZMZZPZPZPMMZZMPZMPMPPPMZMPPZZPZZMPMMMZPMZPZPMPMZZZPMPZPMPZPZZPPZZMZPMMMMMMPZPMPZMMPZPZPMZPZMMMZPZMPMPMMPPZPPMZZPPMZPPZPPMMZPMZMMPMZMMPPZMZPPPPMZZPMMPZPPMPZPPPPZMZPPZZMMZZPZPZPPPMMMPPPPZMPPZMPPMPPZZPZPPZMPZMMMZMZZZPZMZMPPZZPPZMPPPZMMPZMZMMZPZZPMMZZPZPPMZPZPPMMMMZPMPPZPZZZMPPPPMMZPPMZMZPMPMZMMPPZMPZZMMPZZPMMZMMZMMMMPZZPZMMPZZPPMZPZMZMMMZPMPPPMMZZPZPPMPMZMZPMMPZZZMPZZPMZZZZZPZPPPPMPPZMPMPPPZPMZPMPMZPPMZPZZMMZPPMPMZZMZMZPPZPZMMPPPMPZPPZPPPPPZPMZPMMZMPMZPMMPPPPPMPPZMMMMZMPMMZZMMZPMPPPMMZZPMPMZMPZZZMMPZZMPPPPMPMPZMZMZZMMPMZZMPZPPPPMZPMMPPMMMZZPMPMPPMZPZPMPZZZPZMPZMZMPZPZZZPZMZZZPPPZZPPZZMPZMPMPZMZZZZPZMZMPPMMZPZMMZZZPPPPZZMMZPZPMPZZMMZMPZZMZZPPZZPZZMPPMMZZMPZZMZZPMZZMZZPMPPPMMMZZMPZPZZZZPMMPPZPMMPPZZMPZZPPMPZMPPMPPPZPZMMPMMMPPZPZPPZZMPZMZZZZPMPMPPZMZMZPPMMMZPZZMZMZZMMMZMZZPZZMMMZPMPPZPPPZZMPMZMPZMPZMZMPPPMMZZZZMPZMPPPZPMZPZMPZZZMZZZPPZMZZPPZMPPPPPMPMZPMMZMZPMMMMZPMZPMMPPMMMPPZZPMZZZMMMMPZZZZPMPMMMZPZPPZMMPMPMPZMZZZMPZZPPPPPPMZZZZPMZZZMPZZZZZPZPMZMMZZMZZMMMPMMZPZMZMPZPMMMMMZZZMMZMZPPZPPMZPZPPPMPZMZZPZPPZZMMPMPMZZZPMMPPMMZPZPZMZMMPMPPPPPZMPMPPMPPMZMZZPPZMZPPZZZPZMZZMPPZMMZPPMMZMZMMZMPPMPZMZZMPZPPZPZPPZZPZZZMZPZMPPZMMPZMPZMZPMMPZZZZMMPZZPMZZZPMPPZPPZPPZZMPZPMMPPPZPZPPZZZZZPPPMPMZMPZPZPPZZMZZPPMZMPPPMPMZMZMMZZMPMPZPZPPZPPZPZZMPZPZZZZPPZZMZMZPZZZZPPPMZZPPZMZMZPPZMZZMPPZMPZZZMMZPPMMMPMZPPPMMZZPZPZPZMMPPZMMPMMPZPMPZMZZPMZPMMPPPMMZPMZMPMMPZZZZPZMPMZMZPPZZZMMPZPZMPZMPZPPMMZZPMMMZPPMZZPMZZZMZPPPZMPZZMMPMZZMZMPMMPPMMZZMMZZPZZMPMPMZPZPMPZPPPPPPMPPMZZZZPMMPPMZPMZPZZMMMPPPZZZPZPMZZZZPZZZMMZZZMPZPMMZZMPPPZZPPPZPMPPMZZMZZPMMPPPPMPPMMPMPPZZPPPPPZZPMPZMZPZMPPPPMPMPMMMPPZPMMZZPZMMZMMZPZZPPPZZMPMMMMZMMMZZPMMMMPMMMPMPMZMMMPMZZMPPPZMMPPZMPMZMMZZMPPMMMPZPMZZMZZMPMZZZZZZMMPMPPZPMZMZMZZPMMPMMZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZPZPPPZZMMPPMZPMMZPPZZZZZZZPZZZZZZZZZZZZZZZZZZZZZZZZZZZPZZZZZZZZZZZZZZZZZZZZZZZZZMPMMMMZMPPZZMPPPPMMPZZMPMZPMZPPPPMPPMZMMPPMPPPZMMMMPZPZZMZPPPPZZZPPMZZPMZZPPMPZMMPPPMMPZMMPZZPPZPZPZPPMMMPZMZZZPZPPMPMPPPMPZPMZZPMZPMZZMZPZZPZPMPPZMMMMZMPPPPPMPMZZPZPZZZZZPZMMZZZPZZPPMZMZMMMMPPPMPZPPMMZPMPMPMZMPMPMMZMPMPPPMMPMPMZPPPMPPPPZPMMZMPPPPZZMPPMZPMZPMZPMZPMPMMPZMZPPPMMMZPMZPZMPZPPZMZMZZZMPPMMPZZZMPPPMZPPPMPPMZZZMMZZPMMPMMMMPPPMMMZMPPPMPPZMMZZPPMZPMZMPMPZMPMMPZPPMPMMPPMZZZMMZZPPZMZZMMMPPMMZPMPZPZMZMMMZZMMPZZZPPZZMZMPPMMZMMMZZPZZPZMPPMPZZZZPPZMMPMZZMMPZMZPZMZZZZZZZZZZZZZZZZZZPPPZZZMMPMZZPMPZZMZMZPZPZZZMMZPMZPZMMZZZMZMMMPPZMZZMPZPZZPZPMZZPPPPZPZZZPPMPZZPPPZPMMMZMMZMMZPZZMMMPMPZZPPPMZMPMPPZPZZPMMMMZZMMPZZZZPMPZPPMZZMZZMPPZZMZZPPPPMMPZMPZPMMPPZZZMPPMMPZMPMZZZMZPMZPPZPMPMPZMZMPZPZZPZPMZZZPZMMZMZPMPPPZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    const SYMBOLS_STATE_EXPECTED: &str = "PPPMZMMMPZMZMMMZPMZPMZPMMMZPMPPZZMMMMMZMPZPZZPZPZZMZMMPZMMZMPMPMZZPPPMZZMZZZMPPMZPMPPMMMMPPPMPPPZPMPMMPPZZPZZZZPPZMPZPZPMZPPPPMMMMPZPMPZPZMZPZPZMMMPZMPMPMZZZPPMPZZPZMPMPPMZPMPMZMPZZZZMMZPZZZZMZZPPMZZMZZPPMPMMMZPPMPMZMZPPZPZPPPZMMZZMZPPMMPMMPZPMZMMMZZMZMPPZZMZMPMMZZPZZZZPZPPMPZMPMZMPPPZZZPPZMPPPPZZPZMZPMMZPPPZMMPMZPZZMMMPZZZMZPMPMZMZZMPPPZZZZMMZMMMMZPZPZZZZMMZPMPZPPMMZPMPMPPMZPPPPMPPPPPMZMMZZZZZMPMZMZPPMMMZMZMMMZPMPZPMZZPZZZMMPMPZZPZZZZMPPMMPMPZMPPPPMPMPZZPPPMPMPPZPZZMPMZMZZZZZZZPPPMZZPPZMPZZZPPPPPPMZZPPMMZPMMMZZMPZMPPPZMPMPMPPMMZZZPZZZZMMPZZZMZPMPZPPZMZMZMZZPZZZMZMZMPMZPPZPPMPMPZPPMPPZPMMPZPZZZZMPPZMMZZPMPPZPMPZZMMZMZZMMMZZPZPMMZMPMZMZMMPZZMZPZMMZMPMPZMMMMMZPMMMMMMZZZPPZPZPPZPPPMZPZPMMMPZMMZZPZPZPPZZPPZPPMPMZMMPPZPZPZPM";

    const HASH_EXPECTED: &str = "MQEXNUUUWGANWBAJROSQGZMZZFYGPEVMUPDC9DBJHMNBGCHCNSGZLBCTVUYB9WARIYXLTWVYHJLSZHPPJ";
    
    #[test]
    fn test_tx2trit_to_absorb() {

        assert_eq!(TX_LENGTH, TX_STRING.len());

        // tx2trit
        // TX(string TX_LENGTH:2673) -- string to [u8] --> TRITS(-1/0/1 TRITS_LENGTH:TX_LENGTH*3)
        let trits = tx2trit(TX_STRING);
        let symbols_trits = trits2symbol_tryte(trits);

        assert_eq!(SYMBOLS_TRITS_EXPECTED, symbols_trits);
        assert_eq!(TRITS_LENGTH, symbols_trits.len());

        // absorb(and transform)
        // TRITS -- [u8] to [u8] --> STATE(-1/0/1 STATE_LENGTH)
        let state = absorb(trits, TRITS_LENGTH);
        let symbols_state = trits2symbol_state(state);

        assert_eq!(SYMBOLS_STATE_EXPECTED, symbols_state);
        assert_eq!(STATE_LENGTH, symbols_state.len());

        // STATE_LENGTH : 3 * HASH_LENGTH

        // absorb(and transform)
        // STATE -- [u8] to String --> TRYTE(9+A-Z HASH_LENGTH / 3)
        let tryte = hash2tryte(state);
        let symbols_tryte = tryte2symbol(tryte);

        assert_eq!(HASH_EXPECTED, symbols_tryte);
        assert_eq!(TRYTE_LENGTH, tryte.len());
    }

    fn tryte2symbol(tryte: [u8; TRYTE_LENGTH]) -> String {
        let converted: String = String::from_utf8(tryte.to_vec()).unwrap();
    
        converted
    }

    fn trits2symbol_tryte(trits: [i8; TRITS_LENGTH]) -> String
    {
        let mut trits_symbol: [char; TRITS_LENGTH] = ['0'; TRITS_LENGTH];
        for count in 0..TRITS_LENGTH {
            trits_symbol[count] = trite2char(trits[count]);
        }

        trits_symbol.iter().collect()
    }

    fn trits2symbol_state(trits: [i8; STATE_LENGTH]) -> String
    {
        let mut trits_symbol: [char; STATE_LENGTH] = ['0'; STATE_LENGTH];
        for count in 0..STATE_LENGTH {
            trits_symbol[count] = trite2char(trits[count]);
        }

        trits_symbol.iter().collect()
    }

    fn trite2char(trite: i8) -> char {
        
        let trite_symbol;
        if trite == -1 {
            trite_symbol = 'M';
        } else if trite == 1 {
            trite_symbol = 'P';
        } else if trite == 0 {
            trite_symbol = 'Z';
        } else {
            panic!("unknown trits {}", trite);
        } 

        trite_symbol
    }
}